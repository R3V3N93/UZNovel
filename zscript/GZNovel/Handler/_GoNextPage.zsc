extend class GZNovelHandler
{

    CG FindCGfromStage(int id)
    {
        for(int i = 0; i < stage.cg.Size(); i++)
        {
            if(stage.cg[i].id == id)
                return stage.cg[i];
        }

        return null;
    }

    void GoNextPage(int page = -1) 
    {
        if(page != -1) // this is placed here in order to initialize books in StartBook()
            curPage = page; 

        if(!IsInBook())
            return;

        if(page == -1)
            curPage++;

        if(curPage == curBook.GetPageCount())
        {
            EndBook();
            return;
        }

        stage.speakers = "";
        stage.text = null;
        stage.curLine = 0;
        stage.textTimer = 0.0;
        stage.textPos = (0.0, 0.0);

        

        Array<string> tempSpeakers;

        Page curRealPage = curBook.pages[curPage];

        S_StartSound(curRealPage.sound, CHAN_AUTO);
        S_StartSound(curRealPage.music, CHAN_AUTO);

        stage.text = config.font.BreakLines(curRealPage.text, config.maxLen);
        stage.timerCoeff = curRealPage.text.Length() * 1.0 / (curRealPage.time * 1.0);
        if(curRealPage.bg.IsValid())
            stage.bg = curRealPage.bg;

        if(curRealPage.textPivot & PIVOT_LEFT)   stage.textPos.x = config.textBox_TopLeft.x;
        if(curRealPage.textPivot & PIVOT_CENTER) stage.textPos.x = (config.textBox_TopLeft.x + config.textBox_BottomRight.x) / 2.0;
        if(curRealPage.textPivot & PIVOT_RIGHT)  stage.textPos.x = config.textBox_BottomRight.x;
        if(curRealPage.textPivot & PIVOT_TOP)    stage.textPos.y = config.textBox_TopLeft.y;
        if(curRealPage.textPivot & PIVOT_MIDDLE) stage.textPos.y = (config.textBox_TopLeft.y + config.textBox_BottomRight.y) / 2.0;
        if(curRealPage.textPivot & PIVOT_BOTTOM) stage.textPos.y = config.textBox_BottomRight.y;

        // Remove
        if(curRealPage.remove.Size() > 0)
        {
            if(curRealPage.remove.Find("__ALL__") != curRealPage.remove.Size())
            {
                stage.characters.Clear();
            }

            for(int j = 0; j < stage.characters.Size(); j++)
            {
                if(curRealPage.remove.Find(stage.characters[j].codeName) != curRealPage.remove.Size())
                    stage.characters.Delete(j);
            }
        }

        for(int i = 0; i < curRealPage.cg.Size(); i++)
        {
            CG curCG = FindCGFromStage(curRealPage.cg[i].id);
            if(!curCG)
            {
                curCG = CG.Create();
                curCG.id = curRealPage.cg[i].id;
                stage.cg.Push(curCG);
            }
            
            if(!curCG.graphic.IsValid())    curCG.graphic = curRealPage.cg[i].graphic;
            if(curCG.pos.Length() <= 0.0)   curCG.pos = curRealPage.cg[i].pos;
            if(curCG.size.Length() <= 0.0)  curCG.size = curRealPage.cg[i].size;
            if(curCG.pivot == 0)             curCG.pivot = curRealPage.cg[i].pivot;
            if(curCG.fadeIn <= 0.0)           curCG.fadeIn = curRealPage.cg[i].fadeIn;
            if(curCG.fadeOut <= 0.0)      {  curCG.fadeOut = curRealPage.cg[i].fadeOut; curCG.alpha = 1.0;}

            Debug.LogDebug("GoNextPage() : CurCG -> "..curCG.Serialize());
        }

        for(int i = 0; i < curRealPage.directives.Size(); i++)
        {
            Directive curDirective = curRealPage.directives[i];

            if(curDirective.codeName == "")
                continue;
            
            // Obtain curCharacter
            Character curCharacter;
            // From stage
            for(int j = 0; j < stage.characters.Size(); j++)
            {
                if(stage.characters[j].codeName == curDirective.codeName)
                {
                    curCharacter = stage.characters[j];
                    break;
                }
            }
            // If not found in stage, parse from stock characters.
            if(!curCharacter)
            {
                curCharacter = FindCharacter(curDirective.codeName);
                if(!curCharacter)
                    Debug.Throw("From Book "..curBook.name.." : Unknown character \cf"..curDirective.codeName);

                stage.characters.push(curCharacter);
            }

            // initialization
            curCharacter.isHighlight = false;

            // Name
            if(curDirective.name != "") curCharacter.curName = curDirective.name; 
            else                        curCharacter.curName = curCharacter.name; 

            // State
            curCharacter.state = curDirective.state;

            // Graphic
            if(curDirective.graphic.IsValid()) 
                curCharacter.curGraphic = curDirective.graphic; 
            else 
            {
                if(curCharacter.state == -1)
                    curCharacter.curGraphic = Texman.CheckForTexture("");
                else
                    curCharacter.curGraphic = curCharacter.graphics[curCharacter.state];
            }

            // Position
            curCharacter.pos = curDirective.pos;

            // Speaker
            if(curDirective.speaker) tempSpeakers.Push(curCharacter.curName);

            Debug.LogDebug("GoNextPage() : Current Stage Setup\n    Characters size = "..stage.characters.Size().."\n    Speakers = "..stage.speakers.."\n    timerCoeff = "..stage.timerCoeff.."\n    text = \""..stage.text.."\"");
        }

        // Highlight
        if(curRealPage.highlight.Find("__ALL__") != curRealPage.highlight.Size())
        {
            for(int j = 0; j < stage.characters.Size(); j++)
            {
                stage.characters[j].isHighlight = true;
            }
        }
        else
        {
            for(int j = 0; j < stage.characters.Size(); j++)
            {
                if(curRealPage.highlight.Find(stage.characters[j].codeName) != curRealPage.highlight.Size())
                    stage.characters[j].isHighlight = true;
                else
                    stage.characters[j].isHighlight = false;
            }
        }

        if(tempSpeakers.Size() > 0)
        {
            if(tempSpeakers.Size() == 1)
                stage.speakers = tempSpeakers[0];
            else
            {
                for(int i = 0; i < tempSpeakers.Size(); i++)
                {
                    stage.speakers.AppendFormat(tempSpeakers[i]);
                    if(i+1 < tempSpeakers.Size())
                        stage.speakers.AppendFormat(", ");
                }
            }

            tempSpeakers.Clear();
        }
    }
}