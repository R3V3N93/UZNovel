extend class GZNovelHandler
{
    void LoadBooks(string fileName) 
    {
        int lump = Wads.CheckNumForFullName(fileName);
        if(lump == -1)
        {
            Debug.LogWarning("LoadBooks() : Could not load json named \cf"..fileName);
            return;
        }

        JsonElementOrError data = JSON.parse(Wads.ReadLump(lump),false);
		if(data is "JsonError")
        {
			Debug.Throw("LoadBooks(): "..JsonError(data).what);
		}

        // Deserialize
        JsonObject obj = JsonObject(JsonElement(data));

        JsonElement bookArrElm = obj.get("Books");
        if(!bookArrElm)
        {
            JsonElement ThisMFmisspelledCharactersFfs = obj.get("Book"); 
            Debug.Throw("LoadBooks(): Could not find array \cfBooks\c-."..(ThisMFmisspelledCharactersFfs ? "\nIntead, \cfBook\c- is found. Did you forget to \cfwrite extra s?\c-" : ""));
        }
        JsonArray bookArr = JsonArray(bookArrElm);

        if(!bookArr)
            Debug.Throw("LoadBooks(): Element \cfBooks\c- is found but it is not \cfArray\c-, but "..bookArrElm.GetClassName());
        
        for(uint i = 0; i < bookArr.size(); i++)
        {
            Book book = Book.Create();
            JsonElement item = bookArr.get(i);
            JsonObject bookObj = JsonObject(item);

            JsonString nameJson = JsonString(bookObj.get("Name"));
            JsonArray pagesArr = JsonArray(bookObj.get("Pages"));

            if(!nameJson) Debug.Throw("LoadBooks(): At Character "..(i+1).." : Property \cfName\c- is not present, or type is not \cfstring\c-");
            if(!pagesArr) Debug.Throw("LoadBooks(): At Character "..(i+1).." : Property \cfPages\c- is not present, or type is not \cfarray\c-");

            if(FindBook(nameJson.s))
            {
                Debug.LogWarning("LoadBooks() : From \cf"..fileName.."\c-, book \cf"..nameJson.s.."\c- is already loaded.");
                continue;
            }

            Array<Page> pages;

            for(uint j = 0; j < pagesArr.Size(); j++)
            {
                Page page = Page.Create();

                JsonObject pageObj = JsonObject(pagesArr.Get(j));

                JsonString bgJson = JsonString(pageObj.get("BG"));
                JsonArray cgJson = JsonArray(pageObj.get("CG"));
                JsonString sfxJson = JsonString(pageObj.get("Sound"));
                JsonString musicJson = JsonString(pageObj.get("Music"));
                JsonString textJson = JsonString(pageObj.get("Text"));
                JsonArray textPivotJson = JsonArray(pageObj.get("TextPivot"));
                JsonInt timeJson = JsonInt(pageObj.get("Time"));
                JsonArray charJson = JsonArray(pageObj.get("Characters"));
                JsonArray char_removeJson = JsonArray(pageObj.get("Remove"));
                JsonArray char_highlightJson = JsonArray(pageObj.get("Highlight"));

                if(bgJson)
                {
                    TextureID tex = Texman.CheckForTexture(bgJson.s);
                    if(tex.IsValid() == false)
                        Debug.LogWarning("LoadBooks(): At Page "..(j+1).."  of Book "..(i+1)..": Property \cfBG\c-'s graphic is not valid. Make sure you input correct directory or the graphic's file is there");
                    page.bg = tex;
                }
                
                if(cgJson)
                {  
                    for(int k = 0; k < cgJson.Size(); k++)
                    {
                        JsonObject cgObjJson = JsonObject(cgJson.Get(k));
                        
                        CG cg = CG.Create();

                        JsonInt cgIDJson = JsonInt(cgObjJson.get("id"));
                        JsonString graphic = JsonString(cgObjJson.get("Graphic"));
                        TextureID tex = Texman.CheckForTexture((graphic == null ? "" : graphic.s));
                        if(tex.IsValid() == false)
                            Debug.LogWarning("LoadBooks(): At Page "..(j+1)..": Property \cfCG\c-'s graphic is not valid. Make sure you input correct directory or the graphic's file is there");
                        JsonArray pos = JsonArray(cgObjJson.get("Pos"));
                        JsonArray size = JsonArray(cgObjJson.get("Size"));
                        JsonArray cgPivotJson = JsonArray(cgObjJson.get("Pivot"));
                        JsonInt cgFadeOutJson = JsonInt(cgObjJson.get("FadeOut"));
                        JsonInt cgFadeInJson = JsonInt(cgObjJson.get("FadeIn"));
                        JsonElement cgRemoveJson = cgObjJson.get("Remove");

                        if(!cgIDJson)  Debug.Throw("LoadBooks(): At Book "..(i+1).." At Page "..(j+1).."At CG "..(k+1).." : Property \cfid\c- is not present, or type is not \cfint\c-");

                        double posX, posY, sizeX, sizeY;
                        if(pos && JsonDouble(pos.Get(0))) posX = JsonDouble(pos.Get(0)).asDouble();
                        else                              posX = 0.5;
                        if(pos && JsonDouble(pos.Get(1))) posY = JsonDouble(pos.Get(1)).asDouble();
                        else                              posY = 0.5;

                        if(size && JsonDouble(size.Get(0))) sizeX = JsonDouble(size.Get(0)).asDouble();
                        else                                sizeX = 1.0;
                        if(size && JsonDouble(size.Get(1))) sizeY = JsonDouble(size.Get(1)).asDouble();
                        else                                sizeY = 1.0;

                        if(!cgPivotJson) cg.pivot = PIVOT_CENTER|PIVOT_MIDDLE;
                        else                   
                        {
                            for(int l = 0; l < cgPivotJson.Size(); l++)
                            {
                                string item = JsonString(cgPivotJson.Get(l)).s;
                                if(item == "Left")   cg.pivot |= PIVOT_LEFT;
                                if(item == "Center") cg.pivot |= PIVOT_CENTER;
                                if(item == "Right")  cg.pivot |= PIVOT_RIGHT;
                                if(item == "Top")    cg.pivot |= PIVOT_TOP;
                                if(item == "Middle") cg.pivot |= PIVOT_MIDDLE;
                                if(item == "Bottom") cg.pivot |= PIVOT_BOTTOM;
                            }
                        }

                        if(cgFadeOutJson) cg.fadeOut = cgFadeOutJson.asInt();
                        else              cg.fadeOut = 0;

                        if(cgFadeInJson) cg.fadeIn = cgFadeInJson.asInt();
                        else             cg.fadeIn = 0;

                        cg.graphic = tex;
                        cg.pos = (posX, posY);
                        cg.size= (sizeX, sizeY);

                        page.cg.Push(cg);
                    }
                }

                if(sfxJson) page.sound = sfxJson.s;
                if(musicJson) page.music = musicJson.s;
                if(textJson) page.text = textJson.s;
                if(!textPivotJson) page.textPivot = PIVOT_LEFT|PIVOT_TOP;
                else                   
                {
                    for(int i = 0; i < textPivotJson.Size(); i++)
                    {
                        string item = JsonString(textPivotJson.Get(i)).s;
                        if(item == "Left")
                            page.textPivot |= PIVOT_LEFT;
                        if(item == "Center")
                            page.textPivot |= PIVOT_CENTER;
                        if(item == "Right")
                            page.textPivot |= PIVOT_RIGHT;
                        if(item == "Top")
                            page.textPivot |= PIVOT_TOP;
                        if(item == "Middle")
                            page.textPivot |= PIVOT_MIDDLE;
                        if(item == "Bottom")
                            page.textPivot |= PIVOT_BOTTOM;
                    }
                }
                if(timeJson)
                    page.time = timeJson.asInt();

                if(char_removeJson)
                {
                    Array<string> tempRemove;
                    for(uint l = 0; l < char_removeJson.Size(); l++)
                    {
                        tempRemove.Push(JsonString(char_removeJson.get(l)).s);
                    }
                    page.remove.Move(tempRemove);
                }

                if(char_highlightJson)
                {
                    Array<string> tempHighlight;
                    for(uint l = 0; l < char_highlightJson.Size(); l++)
                    {
                        tempHighlight.Push(JsonString(char_highlightJson.get(l)).s);
                    }
                    page.highlight.Move(tempHighlight);
                }

                if(charJson)
                {
                    for(uint k = 0; k < charJson.size(); k++)
                    {
                        JsonObject charObj = JsonObject(charJson.Get(k));
                        if(!charObj)
                            Debug.Throw("LoadBooks(): At Character "..(k+1).." of Page "..(j+1).." : Characters array should not have other than Objects.");
                        
                        Directive directive = Directive.Create();

                        JsonString char_codeNameJson = JsonString(charObj.get("Codename"));
                        JsonString char_nameJson = JsonString(charObj.get("Name"));
                        JsonString char_graphicJson = JsonString(charObj.get("Graphic"));
                        JsonInt char_stateJson = JsonInt(charObj.get("State"));
                        JsonDouble char_posJson = JsonDouble(charObj.get("Pos"));
                        JsonArray char_sizeJson = JsonArray(charObj.get("Size"));
                        JsonBool char_speakerJson = JsonBool(charObj.get("IsSpeaker"));

                        if(char_codeNameJson) directive.codeName = char_codeNameJson.s;
                        if(char_nameJson) directive.name = char_nameJson.s;
                        if(char_graphicJson)
                        {
                            TextureID tex = Texman.CheckForTexture(char_graphicJson.s);
                            if(tex.IsValid() == false)
                                Debug.LogWarning("LoadBooks(): At Character"..(k+1).." of Page "..(j+1)..": Property \cfGraphic\c-'s graphic is not valid. Make sure you input correct directory or the graphic's file is there");
                            directive.graphic = tex;
                        }
                        if(char_stateJson) directive.state = char_stateJson.asInt();
                        if(char_posJson) directive.pos = char_posJson.asDouble();
                        if(char_speakerJson) directive.speaker = char_speakerJson.b;

                        if(char_sizeJson)
                        {
                            double sizeX = JsonDouble(char_sizeJson.Get(0)).asDouble();
                            double sizeY = JsonDouble(char_sizeJson.Get(1)).asDouble();
                            directive.size = (sizeX, sizeY);
                        }

                        page.directives.push(directive);
                    }
                }
                Debug.LogDebug("LoadBook(): From \cf"..fileName.."\c-\n   Loaded Page "..(j+1)..":\n     "..page.Serialize());
                pages.push(page);
            }
            book.name = nameJson.s;
            book.pages.Move(pages);

            Debug.LogDebug("LoadBook(): From \cf"..fileName.."\c-\n   Loaded book:\n     "..book.name);

            books.Push(book);
        }
    }
}